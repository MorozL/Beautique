// <auto-generated />
using System;
using Beautique.DataAcess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Beautique.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404133223_seedCompanyTable")]
    partial class seedCompanyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Beautique.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Shampoos & Conditioners"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Body Washes & Soaps"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Facial Care"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "Body Care"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            Name = "Deodorants & Antiperspirants"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 6,
                            Name = "Shaving Products"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 7,
                            Name = "Nail Care"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 8,
                            Name = "Perfumes & Fragrances"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 9,
                            Name = "Lip Care"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 10,
                            Name = "Hand Care"
                        },
                        new
                        {
                            Id = 11,
                            DisplayOrder = 11,
                            Name = "Hair Care"
                        },
                        new
                        {
                            Id = 12,
                            DisplayOrder = 12,
                            Name = "Eye & Eyelid Care"
                        },
                        new
                        {
                            Id = 13,
                            DisplayOrder = 13,
                            Name = "Cleansing & Makeup Removal"
                        },
                        new
                        {
                            Id = 14,
                            DisplayOrder = 14,
                            Name = "Organic & Bio Cosmetics"
                        });
                });

            modelBuilder.Entity("Beautique.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "SkinCare City",
                            Name = "Glow & Care",
                            PhoneNumber = "5557778888",
                            PostalCode = "54321",
                            State = "CA",
                            StreetAddress = "123 Beauty Ave"
                        },
                        new
                        {
                            Id = 2,
                            City = "GreenVille",
                            Name = "Nature's Touch",
                            PhoneNumber = "4446669999",
                            PostalCode = "67890",
                            State = "OR",
                            StreetAddress = "456 Herbal Rd"
                        },
                        new
                        {
                            Id = 3,
                            City = "Shampoo Town",
                            Name = "Silky Locks",
                            PhoneNumber = "3335557777",
                            PostalCode = "11223",
                            State = "TX",
                            StreetAddress = "789 Hair Blvd"
                        });
                });

            modelBuilder.Entity("Beautique.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "A premium shampoo that provides ultimate shine and smoothness.",
                            BarCode = "SW123456789",
                            ImageUrl = "",
                            ListPrice = 55.0,
                            Maker = "SparkLife",
                            Price = 50.0,
                            Price100 = 40.0,
                            Price50 = 45.0,
                            Title = "ShineWave"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "A gentle body wash that leaves your skin refreshed and hydrated.",
                            BarCode = "PG987654321",
                            ImageUrl = "",
                            ListPrice = 40.0,
                            Maker = "CleanseCo",
                            Price = 35.0,
                            Price100 = 25.0,
                            Price50 = 30.0,
                            Title = "PureGlow"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "A soft and nourishing facial cream for smooth and glowing skin.",
                            BarCode = "ST111223344",
                            ImageUrl = "",
                            ListPrice = 65.0,
                            Maker = "VelvetSkin",
                            Price = 60.0,
                            Price100 = 50.0,
                            Price50 = 55.0,
                            Title = "SoftTouch"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Description = "A refreshing deodorant spray that keeps you fresh all day long.",
                            BarCode = "CS554433221",
                            ImageUrl = "",
                            ListPrice = 20.0,
                            Maker = "LushCare",
                            Price = 18.0,
                            Price100 = 14.0,
                            Price50 = 16.0,
                            Title = "ClearSpark"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            Description = "A shaving gel that provides a smooth and irritation-free shave.",
                            BarCode = "FC998877665",
                            ImageUrl = "",
                            ListPrice = 35.0,
                            Maker = "SharpEdge",
                            Price = 30.0,
                            Price100 = 25.0,
                            Price50 = 28.0,
                            Title = "FreshCut"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            Description = "A long-lasting nail polish with vibrant colors and a glossy finish.",
                            BarCode = "GN332211445",
                            ImageUrl = "",
                            ListPrice = 15.0,
                            Maker = "NailArt",
                            Price = 13.0,
                            Price100 = 10.0,
                            Price50 = 12.0,
                            Title = "GlowNail"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 8,
                            Description = "A fresh and uplifting fragrance that is perfect for daily wear.",
                            BarCode = "EV776655443",
                            ImageUrl = "",
                            ListPrice = 50.0,
                            Maker = "ScentAura",
                            Price = 45.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            Title = "EauVibe"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 9,
                            Description = "A hydrating lip balm with a smooth texture and subtle scent.",
                            BarCode = "SK223344556",
                            ImageUrl = "",
                            ListPrice = 10.0,
                            Maker = "LipsCare",
                            Price = 9.0,
                            Price100 = 7.0,
                            Price50 = 8.0,
                            Title = "SoftKiss"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 10,
                            Description = "A nourishing hand cream that keeps your skin soft and hydrated.",
                            BarCode = "HH556677889",
                            ImageUrl = "",
                            ListPrice = 18.0,
                            Maker = "SkinGuard",
                            Price = 16.0,
                            Price100 = 12.0,
                            Price50 = 14.0,
                            Title = "HandHeal"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 12,
                            Description = "A rejuvenating eye cream that targets puffiness and dark circles.",
                            BarCode = "EL998877665",
                            ImageUrl = "",
                            ListPrice = 45.0,
                            Maker = "VisionGlow",
                            Price = 40.0,
                            Price100 = 30.0,
                            Price50 = 35.0,
                            Title = "EyeLuxe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Beautique.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Beautique.Models.Product", b =>
                {
                    b.HasOne("Beautique.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
